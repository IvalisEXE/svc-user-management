// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	repositories "svc-user-management/modules/user/repositories"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositories is an autogenerated mock type for the UserRepositories type
type UserRepositories struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepositories) CreateUser(ctx context.Context, user repositories.CreateUser) (int64, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateUser) (int64, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateUser) int64); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCountUserByID provides a mock function with given fields: ctx, userID
func (_m *UserRepositories) FindCountUserByID(ctx context.Context, userID int64) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindCountUserByID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCountUserByPhoneNo provides a mock function with given fields: ctx, phoneNo
func (_m *UserRepositories) FindCountUserByPhoneNo(ctx context.Context, phoneNo string) (bool, error) {
	ret := _m.Called(ctx, phoneNo)

	if len(ret) == 0 {
		panic("no return value specified for FindCountUserByPhoneNo")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, phoneNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, phoneNo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByID provides a mock function with given fields: ctx, userID
func (_m *UserRepositories) FindUserByID(ctx context.Context, userID int64) (repositories.FindUserByID, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 repositories.FindUserByID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (repositories.FindUserByID, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) repositories.FindUserByID); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(repositories.FindUserByID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByPhoneNo provides a mock function with given fields: ctx, phoneNo
func (_m *UserRepositories) FindUserByPhoneNo(ctx context.Context, phoneNo string) (repositories.FindUserByPhoneNo, error) {
	ret := _m.Called(ctx, phoneNo)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByPhoneNo")
	}

	var r0 repositories.FindUserByPhoneNo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repositories.FindUserByPhoneNo, error)); ok {
		return rf(ctx, phoneNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repositories.FindUserByPhoneNo); ok {
		r0 = rf(ctx, phoneNo)
	} else {
		r0 = ret.Get(0).(repositories.FindUserByPhoneNo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phoneNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserFullnameByID provides a mock function with given fields: ctx, userID, phoneNo, fullname
func (_m *UserRepositories) UpdateUserFullnameByID(ctx context.Context, userID int64, phoneNo string, fullname string) error {
	ret := _m.Called(ctx, userID, phoneNo, fullname)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserFullnameByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, userID, phoneNo, fullname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserProfileByID provides a mock function with given fields: ctx, userID, phoneNo, fullname
func (_m *UserRepositories) UpdateUserProfileByID(ctx context.Context, userID int64, phoneNo string, fullname string) error {
	ret := _m.Called(ctx, userID, phoneNo, fullname)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfileByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, userID, phoneNo, fullname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUserLogin provides a mock function with given fields: ctx, user
func (_m *UserRepositories) UpsertUserLogin(ctx context.Context, user repositories.UserLogin) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUserLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.UserLogin) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepositories creates a new instance of UserRepositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositories(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositories {
	mock := &UserRepositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
